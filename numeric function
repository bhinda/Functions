# ----------------------Numeric Functions -----------
# -  digit manipulations
a <-19.753
# Truncate 
trunc(a)
as.integer(a)
# Ceiling
ceiling(a)
# flloor
floor(a)
# round
round(a,2)  # round(a,0.01)
round(a,1)
round(a,0)

 norm.vect <- rnorm(100000)
 
 mean(norm.vect)
 sd(norm.vect)
 
 # % of number between +/- 1 sigma or standard deviation
 
 norm.vect.1 <-  norm.vect<=1 &  norm.vect >=-1
 
 sum(norm.vect.1 )/length(norm.vect.1)
 
 # % of number between +/- 2 sigma or standard deviation
 
 norm.vect.2 <-  norm.vect<=2 &  norm.vect >=-2
 
 sum(norm.vect.2)/length(norm.vect.2)
 
 # % of number between +/- 3 sigma or standard deviation
 
 norm.vect.3 <-  norm.vect<=3 &  norm.vect >=-3
 
 sum(norm.vect.3)/length(norm.vect.3)
 
 # what is probability that a standard normal random number be between 0 and 1?
 rnorm(100)
 hist(rnorm(100),
      breaks=50,
      col="blue",
      border="white")
 
 # 100 points normal 
 
  #norm <- sigma*stanNormal+mean
 
 norm <- rnorm(10000,50,15)
 mean(norm)
 sd(norm)
 
 hist(norm,
      breaks=50,
      col="blue",
      border="white")
 
 norm.vect.int <- as.integer(norm.vect)
 norm.vect.rnd <- round(norm.vect,2)
 head(norm.vect.rnd,10)

num <- c(25,20,15,30,40)
num1 <- num-26
num2 <-num1*num1
mean(num)
sd(num)
var(num)

min(norm.vect.int )





# Generate numbers which follow a normal distribution
normal <- rnorm(100000) # defualt mean 0 and standard deviation 1
head(normal)

mean(normal)
sd(normal)

hist(normal, breaks=50, col='red')
a <- rnorm(100000,mean = 50,sd=20)
mean(a)
sd(a)

hist(a)

a <- rnorm(1000,40,20)
mean(a)
sd(a)

a.round <- round(a,2)
# print a few initial observations, default 6 
head(a.round)

bino <- rbinom(100,5,0.5)

table(bino)

hist(bino)

# H1B Visa Visa Process
app <- 60000
applyFolks <- 300000

# Chances of Indian be in a sample is 0.2

indians <- rbinom(100,300000,0.2)

hist(indians)

app/applyFolks


# Check if negative values in a vector
head(a)

v1 <- a<0



class(v1)
table(v1)

a.nega <- a[ v1]
head(a.nega)

a1 <- a[!a<0]
head(a1)



v2 <- a1<0

table(v2)


# - Transformation
a.sqrt <- sqrt(a)

table(is.na(a.sqrt))

a1.sqrt <- sqrt(a1)

tail(a.sqrt,20)

df.a <- data.frame(a.sqrt )

length(a.sqrt)

miss.vect <- is.na(a.sqrt)


head(miss.vect,150)
table(miss.vect)

# fining null or missing values
a.missing <- a[miss.vect]
head(a.missing)
a.missing <- a.sqrt[ is.na(a.sqrt)]

a.non.missing <- a.sqrt[ !is.na(a.sqrt)]

length(a.non.missing)

min(a.sqrt)
min(a.non.missing)

min.value <- min(a.sqrt,na.rm = T)

# Managing negative
min.value <- min(a)



vect <- a+abs(min(a))

min(vect)

a1 <- a+abs(min(a))+1

min(a1)

table(a1<0)

a1.nega <- a1[ a1<0]

a1.sqrt <-sqrt(a1)

hist(a1.sqrt)

min(a1.sqrt)

min(a1)

# logarithmic
a1.log <- log(a1)

max(a1.log)

min(a1.log)

a2<-a1+1

a2.log <- log(a2)

min(a2.log)

hist(a1)
hist(a2.log)
a.exp <- exp(a)

hist(a.exp)

log(10)
exp(log(10))

exp(1000)

#Scenario: You have a vector of mean annual temperature in degrees Fahrenheit
# Convert to ceilciius

library(datasets)
library(help=datasets)
#Loads specified data sets
data(nhtemp,package ="datasets" )

help(nhtemp)

head(nhtemp)

cel <- (5/9) * (nhtemp - 32)

temp.df <- data.frame(nhtemp,cel)


par(mfrow=c(1,1))# split plot window in 1 row and 2 column

?plot

windows() # Open new window
par(mfrow=c(2,1))# split plot window in 1 row and 1 column
plot(temp.df$cel,
     main="Celsius",
     col="red")
plot(nhtemp,main="Fahrenheit",col="blue")
dev.off() # close the plotting window
